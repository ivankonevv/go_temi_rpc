// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WoodDoorsApiClient is the client API for WoodDoorsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WoodDoorsApiClient interface {
	GetWoodDoors(ctx context.Context, in *WoodDoorsRequest, opts ...grpc.CallOption) (WoodDoorsApi_GetWoodDoorsClient, error)
	CreateWoodDoor(ctx context.Context, in *CreateWoodDoorRequest, opts ...grpc.CallOption) (*CreateWoodDoorResponse, error)
}

type woodDoorsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWoodDoorsApiClient(cc grpc.ClientConnInterface) WoodDoorsApiClient {
	return &woodDoorsApiClient{cc}
}

func (c *woodDoorsApiClient) GetWoodDoors(ctx context.Context, in *WoodDoorsRequest, opts ...grpc.CallOption) (WoodDoorsApi_GetWoodDoorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WoodDoorsApi_ServiceDesc.Streams[0], "/wood.doors.WoodDoorsApi/GetWoodDoors", opts...)
	if err != nil {
		return nil, err
	}
	x := &woodDoorsApiGetWoodDoorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WoodDoorsApi_GetWoodDoorsClient interface {
	Recv() (*WoodDoorsResponse, error)
	grpc.ClientStream
}

type woodDoorsApiGetWoodDoorsClient struct {
	grpc.ClientStream
}

func (x *woodDoorsApiGetWoodDoorsClient) Recv() (*WoodDoorsResponse, error) {
	m := new(WoodDoorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *woodDoorsApiClient) CreateWoodDoor(ctx context.Context, in *CreateWoodDoorRequest, opts ...grpc.CallOption) (*CreateWoodDoorResponse, error) {
	out := new(CreateWoodDoorResponse)
	err := c.cc.Invoke(ctx, "/wood.doors.WoodDoorsApi/CreateWoodDoor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WoodDoorsApiServer is the server API for WoodDoorsApi service.
// All implementations must embed UnimplementedWoodDoorsApiServer
// for forward compatibility
type WoodDoorsApiServer interface {
	GetWoodDoors(*WoodDoorsRequest, WoodDoorsApi_GetWoodDoorsServer) error
	CreateWoodDoor(context.Context, *CreateWoodDoorRequest) (*CreateWoodDoorResponse, error)
	mustEmbedUnimplementedWoodDoorsApiServer()
}

// UnimplementedWoodDoorsApiServer must be embedded to have forward compatible implementations.
type UnimplementedWoodDoorsApiServer struct {
}

func (UnimplementedWoodDoorsApiServer) GetWoodDoors(*WoodDoorsRequest, WoodDoorsApi_GetWoodDoorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWoodDoors not implemented")
}
func (UnimplementedWoodDoorsApiServer) CreateWoodDoor(context.Context, *CreateWoodDoorRequest) (*CreateWoodDoorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWoodDoor not implemented")
}
func (UnimplementedWoodDoorsApiServer) mustEmbedUnimplementedWoodDoorsApiServer() {}

// UnsafeWoodDoorsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WoodDoorsApiServer will
// result in compilation errors.
type UnsafeWoodDoorsApiServer interface {
	mustEmbedUnimplementedWoodDoorsApiServer()
}

func RegisterWoodDoorsApiServer(s grpc.ServiceRegistrar, srv WoodDoorsApiServer) {
	s.RegisterService(&WoodDoorsApi_ServiceDesc, srv)
}

func _WoodDoorsApi_GetWoodDoors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WoodDoorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WoodDoorsApiServer).GetWoodDoors(m, &woodDoorsApiGetWoodDoorsServer{stream})
}

type WoodDoorsApi_GetWoodDoorsServer interface {
	Send(*WoodDoorsResponse) error
	grpc.ServerStream
}

type woodDoorsApiGetWoodDoorsServer struct {
	grpc.ServerStream
}

func (x *woodDoorsApiGetWoodDoorsServer) Send(m *WoodDoorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WoodDoorsApi_CreateWoodDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWoodDoorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WoodDoorsApiServer).CreateWoodDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wood.doors.WoodDoorsApi/CreateWoodDoor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WoodDoorsApiServer).CreateWoodDoor(ctx, req.(*CreateWoodDoorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WoodDoorsApi_ServiceDesc is the grpc.ServiceDesc for WoodDoorsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WoodDoorsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wood.doors.WoodDoorsApi",
	HandlerType: (*WoodDoorsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWoodDoor",
			Handler:    _WoodDoorsApi_CreateWoodDoor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWoodDoors",
			Handler:       _WoodDoorsApi_GetWoodDoors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wood-doors.proto",
}
