// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: wood-colors.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ColorsRequest) Reset() {
	*x = ColorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorsRequest) ProtoMessage() {}

func (x *ColorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorsRequest.ProtoReflect.Descriptor instead.
func (*ColorsRequest) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{0}
}

type ColorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *WSColor `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ColorsResponse) Reset() {
	*x = ColorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorsResponse) ProtoMessage() {}

func (x *ColorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorsResponse.ProtoReflect.Descriptor instead.
func (*ColorsResponse) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{1}
}

func (x *ColorsResponse) GetData() *WSColor {
	if x != nil {
		return x.Data
	}
	return nil
}

type WSColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid         string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Image        string      `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Thumbnail    string      `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Ral          string      `protobuf:"bytes,5,opt,name=ral,proto3" json:"ral,omitempty"`
	Title        string      `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Hex          string      `protobuf:"bytes,7,opt,name=hex,proto3" json:"hex,omitempty"`
	Manufacturer string      `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Collection   *Collection `protobuf:"bytes,9,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *WSColor) Reset() {
	*x = WSColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WSColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WSColor) ProtoMessage() {}

func (x *WSColor) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WSColor.ProtoReflect.Descriptor instead.
func (*WSColor) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{2}
}

func (x *WSColor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WSColor) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *WSColor) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *WSColor) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *WSColor) GetRal() string {
	if x != nil {
		return x.Ral
	}
	return ""
}

func (x *WSColor) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WSColor) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *WSColor) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *WSColor) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{3}
}

func (x *Collection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collection) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type NewColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image        string      `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Thumbnail    string      `protobuf:"bytes,2,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Ral          string      `protobuf:"bytes,3,opt,name=ral,proto3" json:"ral,omitempty"`
	Title        string      `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Hex          string      `protobuf:"bytes,5,opt,name=hex,proto3" json:"hex,omitempty"`
	Manufacturer string      `protobuf:"bytes,6,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Collection   *Collection `protobuf:"bytes,7,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *NewColorRequest) Reset() {
	*x = NewColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewColorRequest) ProtoMessage() {}

func (x *NewColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewColorRequest.ProtoReflect.Descriptor instead.
func (*NewColorRequest) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{4}
}

func (x *NewColorRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *NewColorRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *NewColorRequest) GetRal() string {
	if x != nil {
		return x.Ral
	}
	return ""
}

func (x *NewColorRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewColorRequest) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *NewColorRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *NewColorRequest) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type NewColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewColorResponse) Reset() {
	*x = NewColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewColorResponse) ProtoMessage() {}

func (x *NewColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewColorResponse.ProtoReflect.Descriptor instead.
func (*NewColorResponse) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{5}
}

func (x *NewColorResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ManufacturersWColorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManufacturersWColorsRequest) Reset() {
	*x = ManufacturersWColorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManufacturersWColorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManufacturersWColorsRequest) ProtoMessage() {}

func (x *ManufacturersWColorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManufacturersWColorsRequest.ProtoReflect.Descriptor instead.
func (*ManufacturersWColorsRequest) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{6}
}

type ManufacturersWColorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Manufacturer string                                       `protobuf:"bytes,2,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Collections  []*ManufacturersWColorsResponse_MCollections `protobuf:"bytes,3,rep,name=collections,proto3" json:"collections,omitempty"`
}

func (x *ManufacturersWColorsResponse) Reset() {
	*x = ManufacturersWColorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManufacturersWColorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManufacturersWColorsResponse) ProtoMessage() {}

func (x *ManufacturersWColorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManufacturersWColorsResponse.ProtoReflect.Descriptor instead.
func (*ManufacturersWColorsResponse) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{7}
}

func (x *ManufacturersWColorsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManufacturersWColorsResponse) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ManufacturersWColorsResponse) GetCollections() []*ManufacturersWColorsResponse_MCollections {
	if x != nil {
		return x.Collections
	}
	return nil
}

type ManufacturersWColorsResponse_MCollections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title  string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Colors []*WSColor `protobuf:"bytes,3,rep,name=colors,proto3" json:"colors,omitempty"`
}

func (x *ManufacturersWColorsResponse_MCollections) Reset() {
	*x = ManufacturersWColorsResponse_MCollections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wood_colors_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManufacturersWColorsResponse_MCollections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManufacturersWColorsResponse_MCollections) ProtoMessage() {}

func (x *ManufacturersWColorsResponse_MCollections) ProtoReflect() protoreflect.Message {
	mi := &file_wood_colors_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManufacturersWColorsResponse_MCollections.ProtoReflect.Descriptor instead.
func (*ManufacturersWColorsResponse_MCollections) Descriptor() ([]byte, []int) {
	return file_wood_colors_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ManufacturersWColorsResponse_MCollections) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManufacturersWColorsResponse_MCollections) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ManufacturersWColorsResponse_MCollections) GetColors() []*WSColor {
	if x != nil {
		return x.Colors
	}
	return nil
}

var File_wood_colors_proto protoreflect.FileDescriptor

var file_wood_colors_proto_rawDesc = []byte{
	0x0a, 0x11, 0x77, 0x6f, 0x6f, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x39, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x57, 0x53,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x01, 0x0a, 0x07,
	0x57, 0x53, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x57, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x1c, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x57, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x57,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x61, 0x0a, 0x0c, 0x4d, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x57, 0x53, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x32, 0x85, 0x02, 0x0a, 0x09,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x41, 0x70, 0x69, 0x12, 0x46, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1b, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4d, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x77,
	0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x57, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73,
	0x57, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_wood_colors_proto_rawDescOnce sync.Once
	file_wood_colors_proto_rawDescData = file_wood_colors_proto_rawDesc
)

func file_wood_colors_proto_rawDescGZIP() []byte {
	file_wood_colors_proto_rawDescOnce.Do(func() {
		file_wood_colors_proto_rawDescData = protoimpl.X.CompressGZIP(file_wood_colors_proto_rawDescData)
	})
	return file_wood_colors_proto_rawDescData
}

var file_wood_colors_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_wood_colors_proto_goTypes = []interface{}{
	(*ColorsRequest)(nil),                             // 0: wood.color.ColorsRequest
	(*ColorsResponse)(nil),                            // 1: wood.color.ColorsResponse
	(*WSColor)(nil),                                   // 2: wood.color.WSColor
	(*Collection)(nil),                                // 3: wood.color.Collection
	(*NewColorRequest)(nil),                           // 4: wood.color.NewColorRequest
	(*NewColorResponse)(nil),                          // 5: wood.color.NewColorResponse
	(*ManufacturersWColorsRequest)(nil),               // 6: wood.color.ManufacturersWColorsRequest
	(*ManufacturersWColorsResponse)(nil),              // 7: wood.color.ManufacturersWColorsResponse
	(*ManufacturersWColorsResponse_MCollections)(nil), // 8: wood.color.ManufacturersWColorsResponse.MCollections
}
var file_wood_colors_proto_depIdxs = []int32{
	2, // 0: wood.color.ColorsResponse.data:type_name -> wood.color.WSColor
	3, // 1: wood.color.WSColor.collection:type_name -> wood.color.Collection
	3, // 2: wood.color.NewColorRequest.collection:type_name -> wood.color.Collection
	8, // 3: wood.color.ManufacturersWColorsResponse.collections:type_name -> wood.color.ManufacturersWColorsResponse.MCollections
	2, // 4: wood.color.ManufacturersWColorsResponse.MCollections.colors:type_name -> wood.color.WSColor
	0, // 5: wood.color.ColorsApi.GetColors:input_type -> wood.color.ColorsRequest
	4, // 6: wood.color.ColorsApi.CreateColor:input_type -> wood.color.NewColorRequest
	6, // 7: wood.color.ColorsApi.GetMwColors:input_type -> wood.color.ManufacturersWColorsRequest
	1, // 8: wood.color.ColorsApi.GetColors:output_type -> wood.color.ColorsResponse
	5, // 9: wood.color.ColorsApi.CreateColor:output_type -> wood.color.NewColorResponse
	7, // 10: wood.color.ColorsApi.GetMwColors:output_type -> wood.color.ManufacturersWColorsResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_wood_colors_proto_init() }
func file_wood_colors_proto_init() {
	if File_wood_colors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wood_colors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wood_colors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wood_colors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WSColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wood_colors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wood_colors_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wood_colors_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wood_colors_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManufacturersWColorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wood_colors_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManufacturersWColorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wood_colors_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManufacturersWColorsResponse_MCollections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wood_colors_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wood_colors_proto_goTypes,
		DependencyIndexes: file_wood_colors_proto_depIdxs,
		MessageInfos:      file_wood_colors_proto_msgTypes,
	}.Build()
	File_wood_colors_proto = out.File
	file_wood_colors_proto_rawDesc = nil
	file_wood_colors_proto_goTypes = nil
	file_wood_colors_proto_depIdxs = nil
}
