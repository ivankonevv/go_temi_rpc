// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetalDoorsApiClient is the client API for MetalDoorsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetalDoorsApiClient interface {
	GetPosts(ctx context.Context, in *PostsRequest, opts ...grpc.CallOption) (MetalDoorsApi_GetPostsClient, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetSingleMetalDoor(ctx context.Context, in *SingleMetalDoorRequest, opts ...grpc.CallOption) (*SingleMetalDoorResponse, error)
}

type metalDoorsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMetalDoorsApiClient(cc grpc.ClientConnInterface) MetalDoorsApiClient {
	return &metalDoorsApiClient{cc}
}

func (c *metalDoorsApiClient) GetPosts(ctx context.Context, in *PostsRequest, opts ...grpc.CallOption) (MetalDoorsApi_GetPostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetalDoorsApi_ServiceDesc.Streams[0], "/metal.MetalDoorsApi/GetPosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &metalDoorsApiGetPostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetalDoorsApi_GetPostsClient interface {
	Recv() (*PostsResponse, error)
	grpc.ClientStream
}

type metalDoorsApiGetPostsClient struct {
	grpc.ClientStream
}

func (x *metalDoorsApiGetPostsClient) Recv() (*PostsResponse, error) {
	m := new(PostsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metalDoorsApiClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/metal.MetalDoorsApi/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metalDoorsApiClient) GetSingleMetalDoor(ctx context.Context, in *SingleMetalDoorRequest, opts ...grpc.CallOption) (*SingleMetalDoorResponse, error) {
	out := new(SingleMetalDoorResponse)
	err := c.cc.Invoke(ctx, "/metal.MetalDoorsApi/GetSingleMetalDoor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetalDoorsApiServer is the server API for MetalDoorsApi service.
// All implementations must embed UnimplementedMetalDoorsApiServer
// for forward compatibility
type MetalDoorsApiServer interface {
	GetPosts(*PostsRequest, MetalDoorsApi_GetPostsServer) error
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetSingleMetalDoor(context.Context, *SingleMetalDoorRequest) (*SingleMetalDoorResponse, error)
	mustEmbedUnimplementedMetalDoorsApiServer()
}

// UnimplementedMetalDoorsApiServer must be embedded to have forward compatible implementations.
type UnimplementedMetalDoorsApiServer struct {
}

func (UnimplementedMetalDoorsApiServer) GetPosts(*PostsRequest, MetalDoorsApi_GetPostsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedMetalDoorsApiServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedMetalDoorsApiServer) GetSingleMetalDoor(context.Context, *SingleMetalDoorRequest) (*SingleMetalDoorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleMetalDoor not implemented")
}
func (UnimplementedMetalDoorsApiServer) mustEmbedUnimplementedMetalDoorsApiServer() {}

// UnsafeMetalDoorsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetalDoorsApiServer will
// result in compilation errors.
type UnsafeMetalDoorsApiServer interface {
	mustEmbedUnimplementedMetalDoorsApiServer()
}

func RegisterMetalDoorsApiServer(s grpc.ServiceRegistrar, srv MetalDoorsApiServer) {
	s.RegisterService(&MetalDoorsApi_ServiceDesc, srv)
}

func _MetalDoorsApi_GetPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetalDoorsApiServer).GetPosts(m, &metalDoorsApiGetPostsServer{stream})
}

type MetalDoorsApi_GetPostsServer interface {
	Send(*PostsResponse) error
	grpc.ServerStream
}

type metalDoorsApiGetPostsServer struct {
	grpc.ServerStream
}

func (x *metalDoorsApiGetPostsServer) Send(m *PostsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MetalDoorsApi_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetalDoorsApiServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metal.MetalDoorsApi/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetalDoorsApiServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetalDoorsApi_GetSingleMetalDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleMetalDoorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetalDoorsApiServer).GetSingleMetalDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metal.MetalDoorsApi/GetSingleMetalDoor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetalDoorsApiServer).GetSingleMetalDoor(ctx, req.(*SingleMetalDoorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetalDoorsApi_ServiceDesc is the grpc.ServiceDesc for MetalDoorsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetalDoorsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metal.MetalDoorsApi",
	HandlerType: (*MetalDoorsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _MetalDoorsApi_CreatePost_Handler,
		},
		{
			MethodName: "GetSingleMetalDoor",
			Handler:    _MetalDoorsApi_GetSingleMetalDoor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPosts",
			Handler:       _MetalDoorsApi_GetPosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metal-doors.proto",
}
