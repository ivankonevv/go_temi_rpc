// source: metal-doors.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.metal.CreatePostRequest', null, global);
goog.exportSymbol('proto.metal.CreatePostResponse', null, global);
goog.exportSymbol('proto.metal.InColors', null, global);
goog.exportSymbol('proto.metal.Post', null, global);
goog.exportSymbol('proto.metal.PostsRequest', null, global);
goog.exportSymbol('proto.metal.PostsResponse', null, global);
goog.exportSymbol('proto.metal.SingleMetalDoorRequest', null, global);
goog.exportSymbol('proto.metal.SingleMetalDoorResponse', null, global);
goog.exportSymbol('proto.metal.SingleMetalDoorResponse.variant', null, global);
goog.exportSymbol('proto.metal.Size', null, global);
goog.exportSymbol('proto.metal.SizeData', null, global);
goog.exportSymbol('proto.metal.Specifications', null, global);
goog.exportSymbol('proto.metal.Variant', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.PostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metal.PostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.PostsRequest.displayName = 'proto.metal.PostsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.PostsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metal.PostsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.PostsResponse.displayName = 'proto.metal.PostsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.Post = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metal.Post.repeatedFields_, null);
};
goog.inherits(proto.metal.Post, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.Post.displayName = 'proto.metal.Post';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.InColors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metal.InColors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.InColors.displayName = 'proto.metal.InColors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.SingleMetalDoorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metal.SingleMetalDoorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.SingleMetalDoorRequest.displayName = 'proto.metal.SingleMetalDoorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.SingleMetalDoorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metal.SingleMetalDoorResponse.repeatedFields_, null);
};
goog.inherits(proto.metal.SingleMetalDoorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.SingleMetalDoorResponse.displayName = 'proto.metal.SingleMetalDoorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.SingleMetalDoorResponse.variant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metal.SingleMetalDoorResponse.variant.repeatedFields_, null);
};
goog.inherits(proto.metal.SingleMetalDoorResponse.variant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.SingleMetalDoorResponse.variant.displayName = 'proto.metal.SingleMetalDoorResponse.variant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.Specifications = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metal.Specifications, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.Specifications.displayName = 'proto.metal.Specifications';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.Variant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metal.Variant.repeatedFields_, null);
};
goog.inherits(proto.metal.Variant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.Variant.displayName = 'proto.metal.Variant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.Size = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metal.Size.repeatedFields_, null);
};
goog.inherits(proto.metal.Size, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.Size.displayName = 'proto.metal.Size';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.SizeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metal.SizeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.SizeData.displayName = 'proto.metal.SizeData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.CreatePostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metal.CreatePostRequest.repeatedFields_, null);
};
goog.inherits(proto.metal.CreatePostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.CreatePostRequest.displayName = 'proto.metal.CreatePostRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metal.CreatePostResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metal.CreatePostResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metal.CreatePostResponse.displayName = 'proto.metal.CreatePostResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.PostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.PostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.PostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.PostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.PostsRequest}
 */
proto.metal.PostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.PostsRequest;
  return proto.metal.PostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.PostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.PostsRequest}
 */
proto.metal.PostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.PostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.PostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.PostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.PostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.PostsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.PostsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.PostsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.PostsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.metal.Post.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.PostsResponse}
 */
proto.metal.PostsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.PostsResponse;
  return proto.metal.PostsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.PostsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.PostsResponse}
 */
proto.metal.PostsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metal.Post;
      reader.readMessage(value,proto.metal.Post.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.PostsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.PostsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.PostsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.PostsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.metal.Post.serializeBinaryToWriter
    );
  }
};


/**
 * optional Post data = 1;
 * @return {?proto.metal.Post}
 */
proto.metal.PostsResponse.prototype.getData = function() {
  return /** @type{?proto.metal.Post} */ (
    jspb.Message.getWrapperField(this, proto.metal.Post, 1));
};


/**
 * @param {?proto.metal.Post|undefined} value
 * @return {!proto.metal.PostsResponse} returns this
*/
proto.metal.PostsResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metal.PostsResponse} returns this
 */
proto.metal.PostsResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metal.PostsResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metal.Post.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.Post.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.Post.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.Post} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.Post.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    inColorsList: jspb.Message.toObjectList(msg.getInColorsList(),
    proto.metal.InColors.toObject, includeInstance),
    inImagesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    outImagesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.Post}
 */
proto.metal.Post.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.Post;
  return proto.metal.Post.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.Post} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.Post}
 */
proto.metal.Post.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 5:
      var value = new proto.metal.InColors;
      reader.readMessage(value,proto.metal.InColors.deserializeBinaryFromReader);
      msg.addInColors(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addInImages(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.Post.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.Post.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.Post} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.Post.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getInColorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.metal.InColors.serializeBinaryToWriter
    );
  }
  f = message.getInImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getOutImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.metal.Post.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.metal.Post.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float price = 3;
 * @return {number}
 */
proto.metal.Post.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */
proto.metal.Post.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated InColors in_colors = 5;
 * @return {!Array<!proto.metal.InColors>}
 */
proto.metal.Post.prototype.getInColorsList = function() {
  return /** @type{!Array<!proto.metal.InColors>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metal.InColors, 5));
};


/**
 * @param {!Array<!proto.metal.InColors>} value
 * @return {!proto.metal.Post} returns this
*/
proto.metal.Post.prototype.setInColorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.metal.InColors=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metal.InColors}
 */
proto.metal.Post.prototype.addInColors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.metal.InColors, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.clearInColorsList = function() {
  return this.setInColorsList([]);
};


/**
 * repeated string in_images = 6;
 * @return {!Array<string>}
 */
proto.metal.Post.prototype.getInImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.setInImagesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.addInImages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.clearInImagesList = function() {
  return this.setInImagesList([]);
};


/**
 * repeated string out_images = 7;
 * @return {!Array<string>}
 */
proto.metal.Post.prototype.getOutImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.setOutImagesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.addOutImages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.Post} returns this
 */
proto.metal.Post.prototype.clearOutImagesList = function() {
  return this.setOutImagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.InColors.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.InColors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.InColors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.InColors.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hex: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.InColors}
 */
proto.metal.InColors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.InColors;
  return proto.metal.InColors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.InColors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.InColors}
 */
proto.metal.InColors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.InColors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.InColors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.InColors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.InColors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string color = 1;
 * @return {string}
 */
proto.metal.InColors.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.InColors} returns this
 */
proto.metal.InColors.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hex = 2;
 * @return {string}
 */
proto.metal.InColors.prototype.getHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.InColors} returns this
 */
proto.metal.InColors.prototype.setHex = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.SingleMetalDoorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.SingleMetalDoorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.SingleMetalDoorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.SingleMetalDoorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.SingleMetalDoorRequest}
 */
proto.metal.SingleMetalDoorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.SingleMetalDoorRequest;
  return proto.metal.SingleMetalDoorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.SingleMetalDoorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.SingleMetalDoorRequest}
 */
proto.metal.SingleMetalDoorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.SingleMetalDoorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.SingleMetalDoorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.SingleMetalDoorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.SingleMetalDoorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.metal.SingleMetalDoorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SingleMetalDoorRequest} returns this
 */
proto.metal.SingleMetalDoorRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metal.SingleMetalDoorResponse.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.SingleMetalDoorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.SingleMetalDoorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.SingleMetalDoorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.SingleMetalDoorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    specifications: (f = msg.getSpecifications()) && proto.metal.Specifications.toObject(includeInstance, f),
    variantsList: jspb.Message.toObjectList(msg.getVariantsList(),
    proto.metal.SingleMetalDoorResponse.variant.toObject, includeInstance),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.SingleMetalDoorResponse}
 */
proto.metal.SingleMetalDoorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.SingleMetalDoorResponse;
  return proto.metal.SingleMetalDoorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.SingleMetalDoorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.SingleMetalDoorResponse}
 */
proto.metal.SingleMetalDoorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 4:
      var value = new proto.metal.Specifications;
      reader.readMessage(value,proto.metal.Specifications.deserializeBinaryFromReader);
      msg.setSpecifications(value);
      break;
    case 5:
      var value = new proto.metal.SingleMetalDoorResponse.variant;
      reader.readMessage(value,proto.metal.SingleMetalDoorResponse.variant.deserializeBinaryFromReader);
      msg.addVariants(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.SingleMetalDoorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.SingleMetalDoorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.SingleMetalDoorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.SingleMetalDoorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSpecifications();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.metal.Specifications.serializeBinaryToWriter
    );
  }
  f = message.getVariantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.metal.SingleMetalDoorResponse.variant.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metal.SingleMetalDoorResponse.variant.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.SingleMetalDoorResponse.variant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.SingleMetalDoorResponse.variant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.SingleMetalDoorResponse.variant.toObject = function(includeInstance, msg) {
  var f, obj = {
    inImagesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    outImagesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    inColor: jspb.Message.getFieldWithDefault(msg, 3, ""),
    outColor: jspb.Message.getFieldWithDefault(msg, 4, ""),
    hex: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.SingleMetalDoorResponse.variant}
 */
proto.metal.SingleMetalDoorResponse.variant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.SingleMetalDoorResponse.variant;
  return proto.metal.SingleMetalDoorResponse.variant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.SingleMetalDoorResponse.variant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.SingleMetalDoorResponse.variant}
 */
proto.metal.SingleMetalDoorResponse.variant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addInImages(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutImages(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInColor(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutColor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.SingleMetalDoorResponse.variant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.SingleMetalDoorResponse.variant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.SingleMetalDoorResponse.variant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getOutImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getInColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutColor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated string in_images = 1;
 * @return {!Array<string>}
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.getInImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.setInImagesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.addInImages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.clearInImagesList = function() {
  return this.setInImagesList([]);
};


/**
 * repeated string out_images = 2;
 * @return {!Array<string>}
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.getOutImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.setOutImagesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.addOutImages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.clearOutImagesList = function() {
  return this.setOutImagesList([]);
};


/**
 * optional string in_color = 3;
 * @return {string}
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.getInColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.setInColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string out_color = 4;
 * @return {string}
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.getOutColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.setOutColor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string hex = 5;
 * @return {string}
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.getHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SingleMetalDoorResponse.variant} returns this
 */
proto.metal.SingleMetalDoorResponse.variant.prototype.setHex = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.metal.SingleMetalDoorResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
 */
proto.metal.SingleMetalDoorResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.metal.SingleMetalDoorResponse.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
 */
proto.metal.SingleMetalDoorResponse.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float price = 3;
 * @return {number}
 */
proto.metal.SingleMetalDoorResponse.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
 */
proto.metal.SingleMetalDoorResponse.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional Specifications specifications = 4;
 * @return {?proto.metal.Specifications}
 */
proto.metal.SingleMetalDoorResponse.prototype.getSpecifications = function() {
  return /** @type{?proto.metal.Specifications} */ (
    jspb.Message.getWrapperField(this, proto.metal.Specifications, 4));
};


/**
 * @param {?proto.metal.Specifications|undefined} value
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
*/
proto.metal.SingleMetalDoorResponse.prototype.setSpecifications = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
 */
proto.metal.SingleMetalDoorResponse.prototype.clearSpecifications = function() {
  return this.setSpecifications(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metal.SingleMetalDoorResponse.prototype.hasSpecifications = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated variant variants = 5;
 * @return {!Array<!proto.metal.SingleMetalDoorResponse.variant>}
 */
proto.metal.SingleMetalDoorResponse.prototype.getVariantsList = function() {
  return /** @type{!Array<!proto.metal.SingleMetalDoorResponse.variant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metal.SingleMetalDoorResponse.variant, 5));
};


/**
 * @param {!Array<!proto.metal.SingleMetalDoorResponse.variant>} value
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
*/
proto.metal.SingleMetalDoorResponse.prototype.setVariantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.metal.SingleMetalDoorResponse.variant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metal.SingleMetalDoorResponse.variant}
 */
proto.metal.SingleMetalDoorResponse.prototype.addVariants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.metal.SingleMetalDoorResponse.variant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
 */
proto.metal.SingleMetalDoorResponse.prototype.clearVariantsList = function() {
  return this.setVariantsList([]);
};


/**
 * repeated string tags = 6;
 * @return {!Array<string>}
 */
proto.metal.SingleMetalDoorResponse.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
 */
proto.metal.SingleMetalDoorResponse.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
 */
proto.metal.SingleMetalDoorResponse.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.SingleMetalDoorResponse} returns this
 */
proto.metal.SingleMetalDoorResponse.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.Specifications.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.Specifications.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.Specifications} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.Specifications.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    metal: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    leaf: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    upperLock: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lowerLock: jspb.Message.getFieldWithDefault(msg, 5, ""),
    valve: jspb.Message.getFieldWithDefault(msg, 6, ""),
    armor: jspb.Message.getFieldWithDefault(msg, 7, ""),
    cylinder: jspb.Message.getFieldWithDefault(msg, 8, ""),
    peephole: jspb.Message.getFieldWithDefault(msg, 9, ""),
    insulation: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sealer: jspb.Message.getFieldWithDefault(msg, 11, ""),
    handle: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.Specifications}
 */
proto.metal.Specifications.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.Specifications;
  return proto.metal.Specifications.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.Specifications} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.Specifications}
 */
proto.metal.Specifications.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMetal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLeaf(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpperLock(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLowerLock(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setValve(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setArmor(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCylinder(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeephole(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setInsulation(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSealer(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.Specifications.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.Specifications.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.Specifications} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.Specifications.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getMetal();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLeaf();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getUpperLock();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLowerLock();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValve();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getArmor();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCylinder();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPeephole();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getInsulation();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSealer();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getHandle();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional float height = 1;
 * @return {number}
 */
proto.metal.Specifications.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float metal = 2;
 * @return {number}
 */
proto.metal.Specifications.prototype.getMetal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setMetal = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float leaf = 3;
 * @return {number}
 */
proto.metal.Specifications.prototype.getLeaf = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setLeaf = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string upper_lock = 4;
 * @return {string}
 */
proto.metal.Specifications.prototype.getUpperLock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setUpperLock = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string lower_lock = 5;
 * @return {string}
 */
proto.metal.Specifications.prototype.getLowerLock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setLowerLock = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string valve = 6;
 * @return {string}
 */
proto.metal.Specifications.prototype.getValve = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setValve = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string armor = 7;
 * @return {string}
 */
proto.metal.Specifications.prototype.getArmor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setArmor = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string cylinder = 8;
 * @return {string}
 */
proto.metal.Specifications.prototype.getCylinder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setCylinder = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string peephole = 9;
 * @return {string}
 */
proto.metal.Specifications.prototype.getPeephole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setPeephole = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string insulation = 10;
 * @return {string}
 */
proto.metal.Specifications.prototype.getInsulation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setInsulation = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string sealer = 11;
 * @return {string}
 */
proto.metal.Specifications.prototype.getSealer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setSealer = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string handle = 12;
 * @return {string}
 */
proto.metal.Specifications.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Specifications} returns this
 */
proto.metal.Specifications.prototype.setHandle = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metal.Variant.repeatedFields_ = [3,4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.Variant.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.Variant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.Variant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.Variant.toObject = function(includeInstance, msg) {
  var f, obj = {
    inColor: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outColor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inImagesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    outImagesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    sizeList: jspb.Message.toObjectList(msg.getSizeList(),
    proto.metal.Size.toObject, includeInstance),
    hex: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.Variant}
 */
proto.metal.Variant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.Variant;
  return proto.metal.Variant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.Variant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.Variant}
 */
proto.metal.Variant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInColor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutColor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addInImages(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutImages(value);
      break;
    case 6:
      var value = new proto.metal.Size;
      reader.readMessage(value,proto.metal.Size.deserializeBinaryFromReader);
      msg.addSize(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.Variant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.Variant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.Variant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.Variant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInColor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutColor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOutImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getSizeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.metal.Size.serializeBinaryToWriter
    );
  }
  f = message.getHex();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string in_color = 1;
 * @return {string}
 */
proto.metal.Variant.prototype.getInColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.setInColor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string out_color = 2;
 * @return {string}
 */
proto.metal.Variant.prototype.getOutColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.setOutColor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string in_images = 3;
 * @return {!Array<string>}
 */
proto.metal.Variant.prototype.getInImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.setInImagesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.addInImages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.clearInImagesList = function() {
  return this.setInImagesList([]);
};


/**
 * repeated string out_images = 4;
 * @return {!Array<string>}
 */
proto.metal.Variant.prototype.getOutImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.setOutImagesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.addOutImages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.clearOutImagesList = function() {
  return this.setOutImagesList([]);
};


/**
 * repeated Size size = 6;
 * @return {!Array<!proto.metal.Size>}
 */
proto.metal.Variant.prototype.getSizeList = function() {
  return /** @type{!Array<!proto.metal.Size>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metal.Size, 6));
};


/**
 * @param {!Array<!proto.metal.Size>} value
 * @return {!proto.metal.Variant} returns this
*/
proto.metal.Variant.prototype.setSizeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.metal.Size=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metal.Size}
 */
proto.metal.Variant.prototype.addSize = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.metal.Size, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.clearSizeList = function() {
  return this.setSizeList([]);
};


/**
 * optional string hex = 7;
 * @return {string}
 */
proto.metal.Variant.prototype.getHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Variant} returns this
 */
proto.metal.Variant.prototype.setHex = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metal.Size.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.Size.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.Size.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.Size} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.Size.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    side: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.metal.SizeData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.Size}
 */
proto.metal.Size.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.Size;
  return proto.metal.Size.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.Size} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.Size}
 */
proto.metal.Size.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSide(value);
      break;
    case 3:
      var value = new proto.metal.SizeData;
      reader.readMessage(value,proto.metal.SizeData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.Size.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.Size.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.Size} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.Size.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.metal.SizeData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 width = 1;
 * @return {number}
 */
proto.metal.Size.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.metal.Size} returns this
 */
proto.metal.Size.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string side = 2;
 * @return {string}
 */
proto.metal.Size.prototype.getSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.Size} returns this
 */
proto.metal.Size.prototype.setSide = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SizeData data = 3;
 * @return {!Array<!proto.metal.SizeData>}
 */
proto.metal.Size.prototype.getDataList = function() {
  return /** @type{!Array<!proto.metal.SizeData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metal.SizeData, 3));
};


/**
 * @param {!Array<!proto.metal.SizeData>} value
 * @return {!proto.metal.Size} returns this
*/
proto.metal.Size.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.metal.SizeData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metal.SizeData}
 */
proto.metal.Size.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.metal.SizeData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.Size} returns this
 */
proto.metal.Size.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.SizeData.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.SizeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.SizeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.SizeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    serial: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dealer: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, ""),
    prepay: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orderDate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    readyDate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    reserveEndDate: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.SizeData}
 */
proto.metal.SizeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.SizeData;
  return proto.metal.SizeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.SizeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.SizeData}
 */
proto.metal.SizeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrepay(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReadyDate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserveEndDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.SizeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.SizeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.SizeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.SizeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDealer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrepay();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrderDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReadyDate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReserveEndDate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string serial = 1;
 * @return {string}
 */
proto.metal.SizeData.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SizeData} returns this
 */
proto.metal.SizeData.prototype.setSerial = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dealer = 2;
 * @return {string}
 */
proto.metal.SizeData.prototype.getDealer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SizeData} returns this
 */
proto.metal.SizeData.prototype.setDealer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.metal.SizeData.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SizeData} returns this
 */
proto.metal.SizeData.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string prepay = 4;
 * @return {string}
 */
proto.metal.SizeData.prototype.getPrepay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SizeData} returns this
 */
proto.metal.SizeData.prototype.setPrepay = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string order_date = 5;
 * @return {string}
 */
proto.metal.SizeData.prototype.getOrderDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SizeData} returns this
 */
proto.metal.SizeData.prototype.setOrderDate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ready_date = 6;
 * @return {string}
 */
proto.metal.SizeData.prototype.getReadyDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SizeData} returns this
 */
proto.metal.SizeData.prototype.setReadyDate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string reserve_end_date = 7;
 * @return {string}
 */
proto.metal.SizeData.prototype.getReserveEndDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.SizeData} returns this
 */
proto.metal.SizeData.prototype.setReserveEndDate = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metal.CreatePostRequest.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.CreatePostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.CreatePostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.CreatePostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.CreatePostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    forCatalog: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    priceMap: (f = msg.getPriceMap()) ? f.toObject(includeInstance, undefined) : [],
    specifications: (f = msg.getSpecifications()) && proto.metal.Specifications.toObject(includeInstance, f),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    variantsList: jspb.Message.toObjectList(msg.getVariantsList(),
    proto.metal.Variant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.CreatePostRequest}
 */
proto.metal.CreatePostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.CreatePostRequest;
  return proto.metal.CreatePostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.CreatePostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.CreatePostRequest}
 */
proto.metal.CreatePostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForCatalog(value);
      break;
    case 3:
      var value = msg.getPriceMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readFloat, null, "", 0.0);
         });
      break;
    case 4:
      var value = new proto.metal.Specifications;
      reader.readMessage(value,proto.metal.Specifications.deserializeBinaryFromReader);
      msg.setSpecifications(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 6:
      var value = new proto.metal.Variant;
      reader.readMessage(value,proto.metal.Variant.deserializeBinaryFromReader);
      msg.addVariants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.CreatePostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.CreatePostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.CreatePostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.CreatePostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getForCatalog();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPriceMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getSpecifications();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.metal.Specifications.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getVariantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.metal.Variant.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.metal.CreatePostRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.CreatePostRequest} returns this
 */
proto.metal.CreatePostRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool for_catalog = 2;
 * @return {boolean}
 */
proto.metal.CreatePostRequest.prototype.getForCatalog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.metal.CreatePostRequest} returns this
 */
proto.metal.CreatePostRequest.prototype.setForCatalog = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, float> price = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.metal.CreatePostRequest.prototype.getPriceMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.metal.CreatePostRequest} returns this
 */
proto.metal.CreatePostRequest.prototype.clearPriceMap = function() {
  this.getPriceMap().clear();
  return this;};


/**
 * optional Specifications specifications = 4;
 * @return {?proto.metal.Specifications}
 */
proto.metal.CreatePostRequest.prototype.getSpecifications = function() {
  return /** @type{?proto.metal.Specifications} */ (
    jspb.Message.getWrapperField(this, proto.metal.Specifications, 4));
};


/**
 * @param {?proto.metal.Specifications|undefined} value
 * @return {!proto.metal.CreatePostRequest} returns this
*/
proto.metal.CreatePostRequest.prototype.setSpecifications = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metal.CreatePostRequest} returns this
 */
proto.metal.CreatePostRequest.prototype.clearSpecifications = function() {
  return this.setSpecifications(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metal.CreatePostRequest.prototype.hasSpecifications = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string tags = 5;
 * @return {!Array<string>}
 */
proto.metal.CreatePostRequest.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metal.CreatePostRequest} returns this
 */
proto.metal.CreatePostRequest.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metal.CreatePostRequest} returns this
 */
proto.metal.CreatePostRequest.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.CreatePostRequest} returns this
 */
proto.metal.CreatePostRequest.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated Variant variants = 6;
 * @return {!Array<!proto.metal.Variant>}
 */
proto.metal.CreatePostRequest.prototype.getVariantsList = function() {
  return /** @type{!Array<!proto.metal.Variant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metal.Variant, 6));
};


/**
 * @param {!Array<!proto.metal.Variant>} value
 * @return {!proto.metal.CreatePostRequest} returns this
*/
proto.metal.CreatePostRequest.prototype.setVariantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.metal.Variant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metal.Variant}
 */
proto.metal.CreatePostRequest.prototype.addVariants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.metal.Variant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metal.CreatePostRequest} returns this
 */
proto.metal.CreatePostRequest.prototype.clearVariantsList = function() {
  return this.setVariantsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metal.CreatePostResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.metal.CreatePostResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metal.CreatePostResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.CreatePostResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metal.CreatePostResponse}
 */
proto.metal.CreatePostResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metal.CreatePostResponse;
  return proto.metal.CreatePostResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metal.CreatePostResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metal.CreatePostResponse}
 */
proto.metal.CreatePostResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metal.CreatePostResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metal.CreatePostResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metal.CreatePostResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metal.CreatePostResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.metal.CreatePostResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.CreatePostResponse} returns this
 */
proto.metal.CreatePostResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.metal.CreatePostResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metal.CreatePostResponse} returns this
 */
proto.metal.CreatePostResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.metal);
