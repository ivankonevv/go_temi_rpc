// source: wood-doors.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var wood$colors_pb = require('./wood-colors_pb.js');
goog.object.extend(proto, wood$colors_pb);
goog.exportSymbol('proto.wood.doors.CreateWoodDoorRequest', null, global);
goog.exportSymbol('proto.wood.doors.CreateWoodDoorResponse', null, global);
goog.exportSymbol('proto.wood.doors.Reserve', null, global);
goog.exportSymbol('proto.wood.doors.WoodDoor', null, global);
goog.exportSymbol('proto.wood.doors.WoodDoorSpecifications', null, global);
goog.exportSymbol('proto.wood.doors.WoodDoorVariant', null, global);
goog.exportSymbol('proto.wood.doors.WoodDoorsRequest', null, global);
goog.exportSymbol('proto.wood.doors.WoodDoorsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wood.doors.WoodDoorsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wood.doors.WoodDoorsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wood.doors.WoodDoorsRequest.displayName = 'proto.wood.doors.WoodDoorsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wood.doors.WoodDoorsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wood.doors.WoodDoorsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wood.doors.WoodDoorsResponse.displayName = 'proto.wood.doors.WoodDoorsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wood.doors.WoodDoor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wood.doors.WoodDoor.repeatedFields_, null);
};
goog.inherits(proto.wood.doors.WoodDoor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wood.doors.WoodDoor.displayName = 'proto.wood.doors.WoodDoor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wood.doors.WoodDoorSpecifications = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wood.doors.WoodDoorSpecifications.repeatedFields_, null);
};
goog.inherits(proto.wood.doors.WoodDoorSpecifications, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wood.doors.WoodDoorSpecifications.displayName = 'proto.wood.doors.WoodDoorSpecifications';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wood.doors.WoodDoorVariant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wood.doors.WoodDoorVariant.repeatedFields_, null);
};
goog.inherits(proto.wood.doors.WoodDoorVariant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wood.doors.WoodDoorVariant.displayName = 'proto.wood.doors.WoodDoorVariant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wood.doors.CreateWoodDoorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wood.doors.CreateWoodDoorRequest.repeatedFields_, null);
};
goog.inherits(proto.wood.doors.CreateWoodDoorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wood.doors.CreateWoodDoorRequest.displayName = 'proto.wood.doors.CreateWoodDoorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wood.doors.Reserve = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wood.doors.Reserve, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wood.doors.Reserve.displayName = 'proto.wood.doors.Reserve';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wood.doors.CreateWoodDoorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wood.doors.CreateWoodDoorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wood.doors.CreateWoodDoorResponse.displayName = 'proto.wood.doors.CreateWoodDoorResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wood.doors.WoodDoorsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wood.doors.WoodDoorsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wood.doors.WoodDoorsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoorsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wood.doors.WoodDoorsRequest}
 */
proto.wood.doors.WoodDoorsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wood.doors.WoodDoorsRequest;
  return proto.wood.doors.WoodDoorsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wood.doors.WoodDoorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wood.doors.WoodDoorsRequest}
 */
proto.wood.doors.WoodDoorsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wood.doors.WoodDoorsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wood.doors.WoodDoorsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wood.doors.WoodDoorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoorsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wood.doors.WoodDoorsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wood.doors.WoodDoorsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wood.doors.WoodDoorsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoorsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.wood.doors.WoodDoor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wood.doors.WoodDoorsResponse}
 */
proto.wood.doors.WoodDoorsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wood.doors.WoodDoorsResponse;
  return proto.wood.doors.WoodDoorsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wood.doors.WoodDoorsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wood.doors.WoodDoorsResponse}
 */
proto.wood.doors.WoodDoorsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wood.doors.WoodDoor;
      reader.readMessage(value,proto.wood.doors.WoodDoor.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wood.doors.WoodDoorsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wood.doors.WoodDoorsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wood.doors.WoodDoorsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoorsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.wood.doors.WoodDoor.serializeBinaryToWriter
    );
  }
};


/**
 * optional WoodDoor data = 1;
 * @return {?proto.wood.doors.WoodDoor}
 */
proto.wood.doors.WoodDoorsResponse.prototype.getData = function() {
  return /** @type{?proto.wood.doors.WoodDoor} */ (
    jspb.Message.getWrapperField(this, proto.wood.doors.WoodDoor, 1));
};


/**
 * @param {?proto.wood.doors.WoodDoor|undefined} value
 * @return {!proto.wood.doors.WoodDoorsResponse} returns this
*/
proto.wood.doors.WoodDoorsResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wood.doors.WoodDoorsResponse} returns this
 */
proto.wood.doors.WoodDoorsResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wood.doors.WoodDoorsResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wood.doors.WoodDoor.repeatedFields_ = [4,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wood.doors.WoodDoor.prototype.toObject = function(opt_includeInstance) {
  return proto.wood.doors.WoodDoor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wood.doors.WoodDoor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    colorsList: jspb.Message.toObjectList(msg.getColorsList(),
    wood$colors_pb.WSColor.toObject, includeInstance),
    imagesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wood.doors.WoodDoor}
 */
proto.wood.doors.WoodDoor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wood.doors.WoodDoor;
  return proto.wood.doors.WoodDoor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wood.doors.WoodDoor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wood.doors.WoodDoor}
 */
proto.wood.doors.WoodDoor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 5:
      var value = new wood$colors_pb.WSColor;
      reader.readMessage(value,wood$colors_pb.WSColor.deserializeBinaryFromReader);
      msg.addColors(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wood.doors.WoodDoor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wood.doors.WoodDoor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wood.doors.WoodDoor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getColorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      wood$colors_pb.WSColor.serializeBinaryToWriter
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.wood.doors.WoodDoor.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.wood.doors.WoodDoor.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float price = 3;
 * @return {number}
 */
proto.wood.doors.WoodDoor.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */
proto.wood.doors.WoodDoor.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated wood.color.WSColor colors = 5;
 * @return {!Array<!proto.wood.color.WSColor>}
 */
proto.wood.doors.WoodDoor.prototype.getColorsList = function() {
  return /** @type{!Array<!proto.wood.color.WSColor>} */ (
    jspb.Message.getRepeatedWrapperField(this, wood$colors_pb.WSColor, 5));
};


/**
 * @param {!Array<!proto.wood.color.WSColor>} value
 * @return {!proto.wood.doors.WoodDoor} returns this
*/
proto.wood.doors.WoodDoor.prototype.setColorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.wood.color.WSColor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wood.color.WSColor}
 */
proto.wood.doors.WoodDoor.prototype.addColors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.wood.color.WSColor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.clearColorsList = function() {
  return this.setColorsList([]);
};


/**
 * repeated string images = 7;
 * @return {!Array<string>}
 */
proto.wood.doors.WoodDoor.prototype.getImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.setImagesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.addImages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.WoodDoor} returns this
 */
proto.wood.doors.WoodDoor.prototype.clearImagesList = function() {
  return this.setImagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wood.doors.WoodDoorSpecifications.repeatedFields_ = [4,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.toObject = function(opt_includeInstance) {
  return proto.wood.doors.WoodDoorSpecifications.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wood.doors.WoodDoorSpecifications} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoorSpecifications.toObject = function(includeInstance, msg) {
  var f, obj = {
    material: jspb.Message.getFieldWithDefault(msg, 1, ""),
    leafCoating: jspb.Message.getFieldWithDefault(msg, 2, ""),
    defaultHeight: jspb.Message.getFieldWithDefault(msg, 3, ""),
    defaultWidthList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    leaf: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    doorBoxSystem: jspb.Message.getFieldWithDefault(msg, 6, ""),
    slopesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    plinthList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    additionalPackList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    customSize: jspb.Message.getFieldWithDefault(msg, 10, ""),
    customColor: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wood.doors.WoodDoorSpecifications}
 */
proto.wood.doors.WoodDoorSpecifications.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wood.doors.WoodDoorSpecifications;
  return proto.wood.doors.WoodDoorSpecifications.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wood.doors.WoodDoorSpecifications} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wood.doors.WoodDoorSpecifications}
 */
proto.wood.doors.WoodDoorSpecifications.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaterial(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeafCoating(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addDefaultWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLeaf(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoorBoxSystem(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addSlopes(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlinth(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addAdditionalPack(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomSize(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wood.doors.WoodDoorSpecifications.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wood.doors.WoodDoorSpecifications} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoorSpecifications.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaterial();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLeafCoating();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDefaultHeight();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDefaultWidthList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getLeaf();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getDoorBoxSystem();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSlopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getPlinthList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getAdditionalPackList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getCustomSize();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCustomColor();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string material = 1;
 * @return {string}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getMaterial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setMaterial = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string leaf_coating = 2;
 * @return {string}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getLeafCoating = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setLeafCoating = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string default_height = 3;
 * @return {string}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getDefaultHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setDefaultHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string default_width = 4;
 * @return {!Array<string>}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getDefaultWidthList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setDefaultWidthList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.addDefaultWidth = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.clearDefaultWidthList = function() {
  return this.setDefaultWidthList([]);
};


/**
 * optional float leaf = 5;
 * @return {number}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getLeaf = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setLeaf = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string door_box_system = 6;
 * @return {string}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getDoorBoxSystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setDoorBoxSystem = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated string slopes = 7;
 * @return {!Array<string>}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getSlopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setSlopesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.addSlopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.clearSlopesList = function() {
  return this.setSlopesList([]);
};


/**
 * repeated string plinth = 8;
 * @return {!Array<string>}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getPlinthList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setPlinthList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.addPlinth = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.clearPlinthList = function() {
  return this.setPlinthList([]);
};


/**
 * repeated string additional_pack = 9;
 * @return {!Array<string>}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getAdditionalPackList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setAdditionalPackList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.addAdditionalPack = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.clearAdditionalPackList = function() {
  return this.setAdditionalPackList([]);
};


/**
 * optional string custom_size = 10;
 * @return {string}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getCustomSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setCustomSize = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string custom_color = 11;
 * @return {string}
 */
proto.wood.doors.WoodDoorSpecifications.prototype.getCustomColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoorSpecifications} returns this
 */
proto.wood.doors.WoodDoorSpecifications.prototype.setCustomColor = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wood.doors.WoodDoorVariant.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wood.doors.WoodDoorVariant.prototype.toObject = function(opt_includeInstance) {
  return proto.wood.doors.WoodDoorVariant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wood.doors.WoodDoorVariant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoorVariant.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: jspb.Message.getFieldWithDefault(msg, 1, ""),
    imagesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wood.doors.WoodDoorVariant}
 */
proto.wood.doors.WoodDoorVariant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wood.doors.WoodDoorVariant;
  return proto.wood.doors.WoodDoorVariant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wood.doors.WoodDoorVariant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wood.doors.WoodDoorVariant}
 */
proto.wood.doors.WoodDoorVariant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wood.doors.WoodDoorVariant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wood.doors.WoodDoorVariant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wood.doors.WoodDoorVariant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.WoodDoorVariant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string color = 1;
 * @return {string}
 */
proto.wood.doors.WoodDoorVariant.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.WoodDoorVariant} returns this
 */
proto.wood.doors.WoodDoorVariant.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string images = 3;
 * @return {!Array<string>}
 */
proto.wood.doors.WoodDoorVariant.prototype.getImagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wood.doors.WoodDoorVariant} returns this
 */
proto.wood.doors.WoodDoorVariant.prototype.setImagesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.WoodDoorVariant} returns this
 */
proto.wood.doors.WoodDoorVariant.prototype.addImages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.WoodDoorVariant} returns this
 */
proto.wood.doors.WoodDoorVariant.prototype.clearImagesList = function() {
  return this.setImagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wood.doors.CreateWoodDoorRequest.repeatedFields_ = [7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wood.doors.CreateWoodDoorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wood.doors.CreateWoodDoorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.CreateWoodDoorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    forCatalog: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    priceMap: (f = msg.getPriceMap()) ? f.toObject(includeInstance, undefined) : [],
    manufacturer: jspb.Message.getFieldWithDefault(msg, 4, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 5, ""),
    specifications: (f = msg.getSpecifications()) && proto.wood.doors.WoodDoorSpecifications.toObject(includeInstance, f),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    variantsList: jspb.Message.toObjectList(msg.getVariantsList(),
    proto.wood.doors.WoodDoorVariant.toObject, includeInstance),
    reservesList: jspb.Message.toObjectList(msg.getReservesList(),
    proto.wood.doors.Reserve.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wood.doors.CreateWoodDoorRequest}
 */
proto.wood.doors.CreateWoodDoorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wood.doors.CreateWoodDoorRequest;
  return proto.wood.doors.CreateWoodDoorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wood.doors.CreateWoodDoorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wood.doors.CreateWoodDoorRequest}
 */
proto.wood.doors.CreateWoodDoorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForCatalog(value);
      break;
    case 3:
      var value = msg.getPriceMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readFloat, null, "", 0.0);
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setManufacturer(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 6:
      var value = new proto.wood.doors.WoodDoorSpecifications;
      reader.readMessage(value,proto.wood.doors.WoodDoorSpecifications.deserializeBinaryFromReader);
      msg.setSpecifications(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 8:
      var value = new proto.wood.doors.WoodDoorVariant;
      reader.readMessage(value,proto.wood.doors.WoodDoorVariant.deserializeBinaryFromReader);
      msg.addVariants(value);
      break;
    case 9:
      var value = new proto.wood.doors.Reserve;
      reader.readMessage(value,proto.wood.doors.Reserve.deserializeBinaryFromReader);
      msg.addReserves(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wood.doors.CreateWoodDoorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wood.doors.CreateWoodDoorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.CreateWoodDoorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getForCatalog();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPriceMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeFloat);
  }
  f = message.getManufacturer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSpecifications();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.wood.doors.WoodDoorSpecifications.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getVariantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.wood.doors.WoodDoorVariant.serializeBinaryToWriter
    );
  }
  f = message.getReservesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.wood.doors.Reserve.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool for_catalog = 2;
 * @return {boolean}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getForCatalog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.setForCatalog = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, float> price = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getPriceMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.clearPriceMap = function() {
  this.getPriceMap().clear();
  return this;};


/**
 * optional string manufacturer = 4;
 * @return {string}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getManufacturer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.setManufacturer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string collection = 5;
 * @return {string}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.setCollection = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional WoodDoorSpecifications specifications = 6;
 * @return {?proto.wood.doors.WoodDoorSpecifications}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getSpecifications = function() {
  return /** @type{?proto.wood.doors.WoodDoorSpecifications} */ (
    jspb.Message.getWrapperField(this, proto.wood.doors.WoodDoorSpecifications, 6));
};


/**
 * @param {?proto.wood.doors.WoodDoorSpecifications|undefined} value
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
*/
proto.wood.doors.CreateWoodDoorRequest.prototype.setSpecifications = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.clearSpecifications = function() {
  return this.setSpecifications(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.hasSpecifications = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string tags = 7;
 * @return {!Array<string>}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated WoodDoorVariant variants = 8;
 * @return {!Array<!proto.wood.doors.WoodDoorVariant>}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getVariantsList = function() {
  return /** @type{!Array<!proto.wood.doors.WoodDoorVariant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wood.doors.WoodDoorVariant, 8));
};


/**
 * @param {!Array<!proto.wood.doors.WoodDoorVariant>} value
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
*/
proto.wood.doors.CreateWoodDoorRequest.prototype.setVariantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.wood.doors.WoodDoorVariant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.WoodDoorVariant}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.addVariants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.wood.doors.WoodDoorVariant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.clearVariantsList = function() {
  return this.setVariantsList([]);
};


/**
 * repeated Reserve reserves = 9;
 * @return {!Array<!proto.wood.doors.Reserve>}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.getReservesList = function() {
  return /** @type{!Array<!proto.wood.doors.Reserve>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wood.doors.Reserve, 9));
};


/**
 * @param {!Array<!proto.wood.doors.Reserve>} value
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
*/
proto.wood.doors.CreateWoodDoorRequest.prototype.setReservesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.wood.doors.Reserve=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wood.doors.Reserve}
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.addReserves = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.wood.doors.Reserve, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wood.doors.CreateWoodDoorRequest} returns this
 */
proto.wood.doors.CreateWoodDoorRequest.prototype.clearReservesList = function() {
  return this.setReservesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wood.doors.Reserve.prototype.toObject = function(opt_includeInstance) {
  return proto.wood.doors.Reserve.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wood.doors.Reserve} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.Reserve.toObject = function(includeInstance, msg) {
  var f, obj = {
    dealer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    prepay: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orderDate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    readyDate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    reserveEndDate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    state: jspb.Message.getFieldWithDefault(msg, 8, ""),
    serial: jspb.Message.getFieldWithDefault(msg, 9, ""),
    pricePerReserve: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    additionalMap: (f = msg.getAdditionalMap()) ? f.toObject(includeInstance, undefined) : [],
    sizeMap: (f = msg.getSizeMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wood.doors.Reserve}
 */
proto.wood.doors.Reserve.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wood.doors.Reserve;
  return proto.wood.doors.Reserve.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wood.doors.Reserve} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wood.doors.Reserve}
 */
proto.wood.doors.Reserve.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrepay(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReadyDate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserveEndDate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPricePerReserve(value);
      break;
    case 11:
      var value = msg.getAdditionalMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 12:
      var value = msg.getSizeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wood.doors.Reserve.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wood.doors.Reserve.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wood.doors.Reserve} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.Reserve.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDealer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrepay();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrderDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReadyDate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReserveEndDate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPricePerReserve();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getAdditionalMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSizeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string dealer = 1;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getDealer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setDealer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string phone = 3;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string prepay = 4;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getPrepay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setPrepay = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string order_date = 5;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getOrderDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setOrderDate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ready_date = 6;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getReadyDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setReadyDate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string reserve_end_date = 7;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getReserveEndDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setReserveEndDate = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string state = 8;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string serial = 9;
 * @return {string}
 */
proto.wood.doors.Reserve.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setSerial = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional float price_per_reserve = 10;
 * @return {number}
 */
proto.wood.doors.Reserve.prototype.getPricePerReserve = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.setPricePerReserve = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * map<string, string> additional = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.wood.doors.Reserve.prototype.getAdditionalMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.clearAdditionalMap = function() {
  this.getAdditionalMap().clear();
  return this;};


/**
 * map<string, string> size = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.wood.doors.Reserve.prototype.getSizeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.wood.doors.Reserve} returns this
 */
proto.wood.doors.Reserve.prototype.clearSizeMap = function() {
  this.getSizeMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wood.doors.CreateWoodDoorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wood.doors.CreateWoodDoorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wood.doors.CreateWoodDoorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.CreateWoodDoorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wood.doors.CreateWoodDoorResponse}
 */
proto.wood.doors.CreateWoodDoorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wood.doors.CreateWoodDoorResponse;
  return proto.wood.doors.CreateWoodDoorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wood.doors.CreateWoodDoorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wood.doors.CreateWoodDoorResponse}
 */
proto.wood.doors.CreateWoodDoorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wood.doors.CreateWoodDoorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wood.doors.CreateWoodDoorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wood.doors.CreateWoodDoorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wood.doors.CreateWoodDoorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.wood.doors.CreateWoodDoorResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.CreateWoodDoorResponse} returns this
 */
proto.wood.doors.CreateWoodDoorResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.wood.doors.CreateWoodDoorResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wood.doors.CreateWoodDoorResponse} returns this
 */
proto.wood.doors.CreateWoodDoorResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.wood.doors);
